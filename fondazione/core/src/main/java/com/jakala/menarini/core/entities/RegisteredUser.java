/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.time.LocalDate;
import java.time.LocalDateTime;

import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.RegisteredUserRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegisteredUser extends TableImpl<RegisteredUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>menarini_dev.REGISTERED_USER</code>
     */
    public static final RegisteredUser REGISTERED_USER = new RegisteredUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegisteredUserRecord> getRecordType() {
        return RegisteredUserRecord.class;
    }

    /**
     * The column <code>menarini_dev.REGISTERED_USER.id</code>.
     */
    public final TableField<RegisteredUserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.lastname</code>.
     */
    public final TableField<RegisteredUserRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.firstname</code>.
     */
    public final TableField<RegisteredUserRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.email</code>.
     */
    public final TableField<RegisteredUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.username</code>.
     */
    public final TableField<RegisteredUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.occupation</code>.
     */
    public final TableField<RegisteredUserRecord, String> OCCUPATION = createField(DSL.name("occupation"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.gender</code>.
     */
    public final TableField<RegisteredUserRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.birth_date</code>.
     */
    public final TableField<RegisteredUserRecord, LocalDate> BIRTH_DATE = createField(DSL.name("birth_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.phone</code>.
     */
    public final TableField<RegisteredUserRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.tax_id_code</code>.
     */
    public final TableField<RegisteredUserRecord, String> TAX_ID_CODE = createField(DSL.name("tax_id_code"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.linkedin_profile</code>.
     */
    public final TableField<RegisteredUserRecord, String> LINKEDIN_PROFILE = createField(DSL.name("linkedin_profile"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.country</code>.
     */
    public final TableField<RegisteredUserRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column
     * <code>menarini_dev.REGISTERED_USER.personal_data_processing_consent</code>.
     */
    public final TableField<RegisteredUserRecord, String> PERSONAL_DATA_PROCESSING_CONSENT = createField(DSL.name("personal_data_processing_consent"), SQLDataType.CHAR(1), this, "");

    /**
     * The column
     * <code>menarini_dev.REGISTERED_USER.personal_data_processing_consent_ts</code>.
     */
    public final TableField<RegisteredUserRecord, LocalDateTime> PERSONAL_DATA_PROCESSING_CONSENT_TS = createField(DSL.name("personal_data_processing_consent_ts"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.profiling_consent</code>.
     */
    public final TableField<RegisteredUserRecord, String> PROFILING_CONSENT = createField(DSL.name("profiling_consent"), SQLDataType.CHAR(1), this, "");

    /**
     * The column
     * <code>menarini_dev.REGISTERED_USER.profiling_consent_ts</code>.
     */
    public final TableField<RegisteredUserRecord, LocalDateTime> PROFILING_CONSENT_TS = createField(DSL.name("profiling_consent_ts"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column
     * <code>menarini_dev.REGISTERED_USER.newsletter_subscription</code>.
     */
    public final TableField<RegisteredUserRecord, String> NEWSLETTER_SUBSCRIPTION = createField(DSL.name("newsletter_subscription"), SQLDataType.CHAR(1), this, "");

    /**
     * The column
     * <code>menarini_dev.REGISTERED_USER.newsletter_subscription_ts</code>.
     */
    public final TableField<RegisteredUserRecord, LocalDateTime> NEWSLETTER_SUBSCRIPTION_TS = createField(DSL.name("newsletter_subscription_ts"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.legacy_id</code>.
     */
    public final TableField<RegisteredUserRecord, Integer> LEGACY_ID = createField(DSL.name("legacy_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.registration_status</code>.
     */
    public final TableField<RegisteredUserRecord, String> REGISTRATION_STATUS = createField(DSL.name("registration_status"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.created_on</code>.
     */
    public final TableField<RegisteredUserRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER.last_updated_on</code>.
     */
    public final TableField<RegisteredUserRecord, LocalDateTime> LAST_UPDATED_ON = createField(DSL.name("last_updated_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private RegisteredUser(Name alias, Table<RegisteredUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegisteredUser(Name alias, Table<RegisteredUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>menarini_dev.REGISTERED_USER</code> table
     * reference
     */
    public RegisteredUser(String alias) {
        this(DSL.name(alias), REGISTERED_USER);
    }

    /**
     * Create an aliased <code>menarini_dev.REGISTERED_USER</code> table
     * reference
     */
    public RegisteredUser(Name alias) {
        this(alias, REGISTERED_USER);
    }

    /**
     * Create a <code>menarini_dev.REGISTERED_USER</code> table reference
     */
    public RegisteredUser() {
        this(DSL.name("REGISTERED_USER"), null);
    }

    public <O extends Record> RegisteredUser(Table<O> child, ForeignKey<O, RegisteredUserRecord> key) {
        super(child, key, REGISTERED_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DbSchema.MENARINI;
    }

    @Override
    public Identity<RegisteredUserRecord, Long> getIdentity() {
        return (Identity<RegisteredUserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RegisteredUserRecord> getPrimaryKey() {
        return Keys.KEY_REGISTERED_USER_PRIMARY;
    }

    @Override
    public RegisteredUser as(String alias) {
        return new RegisteredUser(DSL.name(alias), this);
    }

    @Override
    public RegisteredUser as(Name alias) {
        return new RegisteredUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisteredUser rename(String name) {
        return new RegisteredUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisteredUser rename(Name name) {
        return new RegisteredUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<Long, String, String, String, String, String, String, LocalDate, String, String, String, String, String, LocalDateTime, String, LocalDateTime, String, LocalDateTime, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import com.jakala.menarini.core.entities.utils.Indexes;
import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.RegisteredUserRoleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegisteredUserRole extends TableImpl<RegisteredUserRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>menarini_dev.REGISTERED_USER_ROLE</code>
     */
    public static final RegisteredUserRole REGISTERED_USER_ROLE = new RegisteredUserRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegisteredUserRoleRecord> getRecordType() {
        return RegisteredUserRoleRecord.class;
    }

    /**
     * The column <code>menarini_dev.REGISTERED_USER_ROLE.id</code>.
     */
    public final TableField<RegisteredUserRoleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>menarini_dev.REGISTERED_USER_ROLE.registered_user_id</code>.
     */
    public final TableField<RegisteredUserRoleRecord, Long> REGISTERED_USER_ID = createField(DSL.name("registered_user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER_ROLE.role_id</code>.
     */
    public final TableField<RegisteredUserRoleRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER_ROLE.created_on</code>.
     */
    public final TableField<RegisteredUserRoleRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>menarini_dev.REGISTERED_USER_ROLE.last_updated_on</code>.
     */
    public final TableField<RegisteredUserRoleRecord, LocalDateTime> LAST_UPDATED_ON = createField(DSL.name("last_updated_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private RegisteredUserRole(Name alias, Table<RegisteredUserRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegisteredUserRole(Name alias, Table<RegisteredUserRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>menarini_dev.REGISTERED_USER_ROLE</code> table
     * reference
     */
    public RegisteredUserRole(String alias) {
        this(DSL.name(alias), REGISTERED_USER_ROLE);
    }

    /**
     * Create an aliased <code>menarini_dev.REGISTERED_USER_ROLE</code> table
     * reference
     */
    public RegisteredUserRole(Name alias) {
        this(alias, REGISTERED_USER_ROLE);
    }

    /**
     * Create a <code>menarini_dev.REGISTERED_USER_ROLE</code> table reference
     */
    public RegisteredUserRole() {
        this(DSL.name("REGISTERED_USER_ROLE"), null);
    }

    public <O extends Record> RegisteredUserRole(Table<O> child, ForeignKey<O, RegisteredUserRoleRecord> key) {
        super(child, key, REGISTERED_USER_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DbSchema.MENARINI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.REGISTERED_USER_ROLE_REGISTERED_USER_ID, Indexes.REGISTERED_USER_ROLE_ROLE_ID);
    }

    @Override
    public Identity<RegisteredUserRoleRecord, Long> getIdentity() {
        return (Identity<RegisteredUserRoleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RegisteredUserRoleRecord> getPrimaryKey() {
        return Keys.KEY_REGISTERED_USER_ROLE_PRIMARY;
    }

    @Override
    public List<ForeignKey<RegisteredUserRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REGISTERED_USER_ROLE_IBFK_1, Keys.REGISTERED_USER_ROLE_IBFK_2);
    }

    private transient RegisteredUser _registeredUser;
    private transient Role _role;

    /**
     * Get the implicit join path to the
     * <code>menarini_dev.REGISTERED_USER</code> table.
     */
    public RegisteredUser registeredUser() {
        if (_registeredUser == null)
            _registeredUser = new RegisteredUser(this, Keys.REGISTERED_USER_ROLE_IBFK_1);

        return _registeredUser;
    }

    /**
     * Get the implicit join path to the <code>menarini_dev.ROLE</code> table.
     */
    public Role role() {
        if (_role == null)
            _role = new Role(this, Keys.REGISTERED_USER_ROLE_IBFK_2);

        return _role;
    }

    @Override
    public RegisteredUserRole as(String alias) {
        return new RegisteredUserRole(DSL.name(alias), this);
    }

    @Override
    public RegisteredUserRole as(Name alias) {
        return new RegisteredUserRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisteredUserRole rename(String name) {
        return new RegisteredUserRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisteredUserRole rename(Name name) {
        return new RegisteredUserRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

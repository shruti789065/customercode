/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import com.jakala.menarini.core.entities.utils.Indexes;
import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.EventEnrollmentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventEnrollment extends TableImpl<EventEnrollmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>menarini_dev.EVENT_ENROLLMENT</code>
     */
    public static final EventEnrollment EVENT_ENROLLMENT = new EventEnrollment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventEnrollmentRecord> getRecordType() {
        return EventEnrollmentRecord.class;
    }

    /**
     * The column <code>menarini_dev.EVENT_ENROLLMENT.id</code>.
     */
    public final TableField<EventEnrollmentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.EVENT_ENROLLMENT.event_id</code>.
     */
    public final TableField<EventEnrollmentRecord, Long> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.EVENT_ENROLLMENT.registered_user_id</code>.
     */
    public final TableField<EventEnrollmentRecord, Long> REGISTERED_USER_ID = createField(DSL.name("registered_user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.EVENT_ENROLLMENT.is_live_stream</code>.
     */
    public final TableField<EventEnrollmentRecord, String> IS_LIVE_STREAM = createField(DSL.name("is_live_stream"), SQLDataType.VARCHAR(1), this, "");

    /**
     * The column
     * <code>menarini_dev.EVENT_ENROLLMENT.live_stream_registration_ts</code>.
     */
    public final TableField<EventEnrollmentRecord, LocalDateTime> LIVE_STREAM_REGISTRATION_TS = createField(DSL.name("live_stream_registration_ts"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>menarini_dev.EVENT_ENROLLMENT.is_residential</code>.
     */
    public final TableField<EventEnrollmentRecord, String> IS_RESIDENTIAL = createField(DSL.name("is_residential"), SQLDataType.VARCHAR(1), this, "");

    /**
     * The column
     * <code>menarini_dev.EVENT_ENROLLMENT.residential_registration_ts</code>.
     */
    public final TableField<EventEnrollmentRecord, LocalDateTime> RESIDENTIAL_REGISTRATION_TS = createField(DSL.name("residential_registration_ts"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column
     * <code>menarini_dev.EVENT_ENROLLMENT.in_person_participation_date_list</code>.
     */
    public final TableField<EventEnrollmentRecord, JSON> IN_PERSON_PARTICIPATION_DATE_LIST = createField(DSL.name("in_person_participation_date_list"), SQLDataType.JSON, this, "");

    /**
     * The column <code>menarini_dev.EVENT_ENROLLMENT.created_on</code>.
     */
    public final TableField<EventEnrollmentRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>menarini_dev.EVENT_ENROLLMENT.last_updated_on</code>.
     */
    public final TableField<EventEnrollmentRecord, LocalDateTime> LAST_UPDATED_ON = createField(DSL.name("last_updated_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private EventEnrollment(Name alias, Table<EventEnrollmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventEnrollment(Name alias, Table<EventEnrollmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>menarini_dev.EVENT_ENROLLMENT</code> table
     * reference
     */
    public EventEnrollment(String alias) {
        this(DSL.name(alias), EVENT_ENROLLMENT);
    }

    /**
     * Create an aliased <code>menarini_dev.EVENT_ENROLLMENT</code> table
     * reference
     */
    public EventEnrollment(Name alias) {
        this(alias, EVENT_ENROLLMENT);
    }

    /**
     * Create a <code>menarini_dev.EVENT_ENROLLMENT</code> table reference
     */
    public EventEnrollment() {
        this(DSL.name("EVENT_ENROLLMENT"), null);
    }

    public <O extends Record> EventEnrollment(Table<O> child, ForeignKey<O, EventEnrollmentRecord> key) {
        super(child, key, EVENT_ENROLLMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DbSchema.MENARINI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EVENT_ENROLLMENT_EVENT_ID, Indexes.EVENT_ENROLLMENT_REGISTERED_USER_ID);
    }

    @Override
    public Identity<EventEnrollmentRecord, Long> getIdentity() {
        return (Identity<EventEnrollmentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventEnrollmentRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_ENROLLMENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<EventEnrollmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVENT_ENROLLMENT_IBFK_1, Keys.EVENT_ENROLLMENT_IBFK_2);
    }

    private transient Event _event;
    private transient RegisteredUser _registeredUser;

    /**
     * Get the implicit join path to the <code>menarini_dev.EVENT</code> table.
     */
    public Event event() {
        if (_event == null)
            _event = new Event(this, Keys.EVENT_ENROLLMENT_IBFK_1);

        return _event;
    }

    /**
     * Get the implicit join path to the
     * <code>menarini_dev.REGISTERED_USER</code> table.
     */
    public RegisteredUser registeredUser() {
        if (_registeredUser == null)
            _registeredUser = new RegisteredUser(this, Keys.EVENT_ENROLLMENT_IBFK_2);

        return _registeredUser;
    }

    @Override
    public EventEnrollment as(String alias) {
        return new EventEnrollment(DSL.name(alias), this);
    }

    @Override
    public EventEnrollment as(Name alias) {
        return new EventEnrollment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventEnrollment rename(String name) {
        return new EventEnrollment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventEnrollment rename(Name name) {
        return new EventEnrollment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, String, LocalDateTime, String, LocalDateTime, JSON, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import com.jakala.menarini.core.entities.utils.Indexes;
import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.TopicRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Topic extends TableImpl<TopicRecord> {

    private static final long serialVersionUID = -1193977736;

    /**
     * The reference instance of <code>menarini_dev.TOPIC</code>
     */
    public static final Topic TOPIC = new Topic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TopicRecord> getRecordType() {
        return TopicRecord.class;
    }

    /**
     * The column <code>menarini_dev.TOPIC.id</code>.
     */
    public final TableField<TopicRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.TOPIC.name</code>.
     */
    public final TableField<TopicRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.TOPIC.created_on</code>.
     */
    public final TableField<TopicRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>menarini_dev.TOPIC.last_updated_on</code>.
     */
    public final TableField<TopicRecord, Timestamp> LAST_UPDATED_ON = createField("last_updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>menarini_dev.TOPIC</code> table reference
     */
    public Topic() {
        this(DSL.name("TOPIC"), null);
    }

    /**
     * Create an aliased <code>menarini_dev.TOPIC</code> table reference
     */
    public Topic(String alias) {
        this(DSL.name(alias), TOPIC);
    }

    /**
     * Create an aliased <code>menarini_dev.TOPIC</code> table reference
     */
    public Topic(Name alias) {
        this(alias, TOPIC);
    }

    private Topic(Name alias, Table<TopicRecord> aliased) {
        this(alias, aliased, null);
    }

    private Topic(Name alias, Table<TopicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Topic(Table<O> child, ForeignKey<O, TopicRecord> key) {
        super(child, key, TOPIC);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbSchema.MENARINI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TOPIC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TopicRecord, Long> getIdentity() {
        return Keys.IDENTITY_TOPIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TopicRecord> getPrimaryKey() {
        return Keys.KEY_TOPIC_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TopicRecord>> getKeys() {
        return Arrays.<UniqueKey<TopicRecord>>asList(Keys.KEY_TOPIC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Topic as(String alias) {
        return new Topic(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Topic as(Name alias) {
        return new Topic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Topic rename(String name) {
        return new Topic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Topic rename(Name name) {
        return new Topic(name, null);
    }
}

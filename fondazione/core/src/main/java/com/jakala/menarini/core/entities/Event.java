/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import com.jakala.menarini.core.entities.utils.Indexes;
import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.EventRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Event extends TableImpl<EventRecord> {

    private static final long serialVersionUID = -221164784;

    /**
     * The reference instance of <code>menarini_dev.EVENT</code>
     */
    public static final Event EVENT = new Event();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventRecord> getRecordType() {
        return EventRecord.class;
    }

    /**
     * The column <code>menarini_dev.EVENT.id</code>.
     */
    public final TableField<EventRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.EVENT.event_type</code>.
     */
    public final TableField<EventRecord, String> EVENT_TYPE = createField("event_type", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.EVENT.title</code>.
     */
    public final TableField<EventRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.EVENT.description</code>.
     */
    public final TableField<EventRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>menarini_dev.EVENT.coordinators</code>.
     */
    public final TableField<EventRecord, String> COORDINATORS = createField("coordinators", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>menarini_dev.EVENT.subscription</code>.
     */
    public final TableField<EventRecord, String> SUBSCRIPTION = createField("subscription", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>menarini_dev.EVENT.start_date</code>.
     */
    public final TableField<EventRecord, Date> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>menarini_dev.EVENT.end_date</code>.
     */
    public final TableField<EventRecord, Date> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>menarini_dev.EVENT.location_id</code>.
     */
    public final TableField<EventRecord, Long> LOCATION_ID = createField("location_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.EVENT.venue_id</code>.
     */
    public final TableField<EventRecord, Long> VENUE_ID = createField("venue_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.EVENT.created_on</code>.
     */
    public final TableField<EventRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>menarini_dev.EVENT.last_updated_on</code>.
     */
    public final TableField<EventRecord, Timestamp> LAST_UPDATED_ON = createField("last_updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>menarini_dev.EVENT</code> table reference
     */
    public Event() {
        this(DSL.name("EVENT"), null);
    }

    /**
     * Create an aliased <code>menarini_dev.EVENT</code> table reference
     */
    public Event(String alias) {
        this(DSL.name(alias), EVENT);
    }

    /**
     * Create an aliased <code>menarini_dev.EVENT</code> table reference
     */
    public Event(Name alias) {
        this(alias, EVENT);
    }

    private Event(Name alias, Table<EventRecord> aliased) {
        this(alias, aliased, null);
    }

    private Event(Name alias, Table<EventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Event(Table<O> child, ForeignKey<O, EventRecord> key) {
        super(child, key, EVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbSchema.MENARINI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENT_LOCATION_ID, Indexes.EVENT_PRIMARY, Indexes.EVENT_VENUE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EventRecord, Long> getIdentity() {
        return Keys.IDENTITY_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EventRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventRecord>> getKeys() {
        return Arrays.<UniqueKey<EventRecord>>asList(Keys.KEY_EVENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventRecord, ?>>asList(Keys.EVENT_IBFK_1, Keys.EVENT_IBFK_2);
    }

    public Location location() {
        return new Location(this, Keys.EVENT_IBFK_1);
    }

    public Venue venue() {
        return new Venue(this, Keys.EVENT_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Event as(String alias) {
        return new Event(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Event as(Name alias) {
        return new Event(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(String name) {
        return new Event(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Event rename(Name name) {
        return new Event(name, null);
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import com.jakala.menarini.core.entities.utils.Indexes;
import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.MagazineSubscriptionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MagazineSubscription extends TableImpl<MagazineSubscriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>menarini_dev.MAGAZINE_SUBSCRIPTION</code>
     */
    public static final MagazineSubscription MAGAZINE_SUBSCRIPTION = new MagazineSubscription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MagazineSubscriptionRecord> getRecordType() {
        return MagazineSubscriptionRecord.class;
    }

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.id</code>.
     */
    public final TableField<MagazineSubscriptionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.magazine</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> MAGAZINE = createField(DSL.name("magazine"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.language</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> LANGUAGE = createField(DSL.name("language"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column
     * <code>menarini_dev.MAGAZINE_SUBSCRIPTION.registered_user_id</code>.
     */
    public final TableField<MagazineSubscriptionRecord, Long> REGISTERED_USER_ID = createField(DSL.name("registered_user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.lastname</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.firstname</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.address1</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> ADDRESS1 = createField(DSL.name("address1"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.address2</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> ADDRESS2 = createField(DSL.name("address2"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.house_no</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> HOUSE_NO = createField(DSL.name("house_no"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.country</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.province</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> PROVINCE = createField(DSL.name("province"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.city</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.zip</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> ZIP = createField(DSL.name("zip"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.phone</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.tax_id_code</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> TAX_ID_CODE = createField(DSL.name("tax_id_code"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column
     * <code>menarini_dev.MAGAZINE_SUBSCRIPTION.have_been_doctor_or_pharmacist</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> HAVE_BEEN_DOCTOR_OR_PHARMACIST = createField(DSL.name("have_been_doctor_or_pharmacist"), SQLDataType.CHAR(1), this, "");

    /**
     * The column
     * <code>menarini_dev.MAGAZINE_SUBSCRIPTION.graduation_year</code>.
     */
    public final TableField<MagazineSubscriptionRecord, Integer> GRADUATION_YEAR = createField(DSL.name("graduation_year"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>menarini_dev.MAGAZINE_SUBSCRIPTION.registration_year</code>.
     */
    public final TableField<MagazineSubscriptionRecord, Integer> REGISTRATION_YEAR = createField(DSL.name("registration_year"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.albo_province</code>.
     */
    public final TableField<MagazineSubscriptionRecord, String> ALBO_PROVINCE = createField(DSL.name("albo_province"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.albo_number</code>.
     */
    public final TableField<MagazineSubscriptionRecord, Integer> ALBO_NUMBER = createField(DSL.name("albo_number"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>menarini_dev.MAGAZINE_SUBSCRIPTION.created_on</code>.
     */
    public final TableField<MagazineSubscriptionRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column
     * <code>menarini_dev.MAGAZINE_SUBSCRIPTION.last_updated_on</code>.
     */
    public final TableField<MagazineSubscriptionRecord, LocalDateTime> LAST_UPDATED_ON = createField(DSL.name("last_updated_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private MagazineSubscription(Name alias, Table<MagazineSubscriptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private MagazineSubscription(Name alias, Table<MagazineSubscriptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>menarini_dev.MAGAZINE_SUBSCRIPTION</code> table
     * reference
     */
    public MagazineSubscription(String alias) {
        this(DSL.name(alias), MAGAZINE_SUBSCRIPTION);
    }

    /**
     * Create an aliased <code>menarini_dev.MAGAZINE_SUBSCRIPTION</code> table
     * reference
     */
    public MagazineSubscription(Name alias) {
        this(alias, MAGAZINE_SUBSCRIPTION);
    }

    /**
     * Create a <code>menarini_dev.MAGAZINE_SUBSCRIPTION</code> table reference
     */
    public MagazineSubscription() {
        this(DSL.name("MAGAZINE_SUBSCRIPTION"), null);
    }

    public <O extends Record> MagazineSubscription(Table<O> child, ForeignKey<O, MagazineSubscriptionRecord> key) {
        super(child, key, MAGAZINE_SUBSCRIPTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DbSchema.MENARINI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MAGAZINE_SUBSCRIPTION_REGISTERED_USER_ID);
    }

    @Override
    public Identity<MagazineSubscriptionRecord, Long> getIdentity() {
        return (Identity<MagazineSubscriptionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MagazineSubscriptionRecord> getPrimaryKey() {
        return Keys.KEY_MAGAZINE_SUBSCRIPTION_PRIMARY;
    }

    @Override
    public List<ForeignKey<MagazineSubscriptionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MAGAZINE_SUBSCRIPTION_IBFK_1);
    }

    private transient RegisteredUser _registeredUser;

    /**
     * Get the implicit join path to the
     * <code>menarini_dev.REGISTERED_USER</code> table.
     */
    public RegisteredUser registeredUser() {
        if (_registeredUser == null)
            _registeredUser = new RegisteredUser(this, Keys.MAGAZINE_SUBSCRIPTION_IBFK_1);

        return _registeredUser;
    }

    @Override
    public MagazineSubscription as(String alias) {
        return new MagazineSubscription(DSL.name(alias), this);
    }

    @Override
    public MagazineSubscription as(Name alias) {
        return new MagazineSubscription(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MagazineSubscription rename(String name) {
        return new MagazineSubscription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MagazineSubscription rename(Name name) {
        return new MagazineSubscription(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<Long, String, String, Long, String, String, String, String, String, String, String, String, String, String, String, String, Integer, Integer, String, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import com.jakala.menarini.core.entities.utils.Indexes;
import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.VenueRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Venue extends TableImpl<VenueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>menarini_dev.VENUE</code>
     */
    public static final Venue VENUE = new Venue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VenueRecord> getRecordType() {
        return VenueRecord.class;
    }

    /**
     * The column <code>menarini_dev.VENUE.id</code>.
     */
    public final TableField<VenueRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.VENUE.location_id</code>.
     */
    public final TableField<VenueRecord, Long> LOCATION_ID = createField(DSL.name("location_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.VENUE.name</code>.
     */
    public final TableField<VenueRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.VENUE.description</code>.
     */
    public final TableField<VenueRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.VENUE.notes</code>.
     */
    public final TableField<VenueRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>menarini_dev.VENUE.created_on</code>.
     */
    public final TableField<VenueRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>menarini_dev.VENUE.last_updated_on</code>.
     */
    public final TableField<VenueRecord, LocalDateTime> LAST_UPDATED_ON = createField(DSL.name("last_updated_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Venue(Name alias, Table<VenueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Venue(Name alias, Table<VenueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>menarini_dev.VENUE</code> table reference
     */
    public Venue(String alias) {
        this(DSL.name(alias), VENUE);
    }

    /**
     * Create an aliased <code>menarini_dev.VENUE</code> table reference
     */
    public Venue(Name alias) {
        this(alias, VENUE);
    }

    /**
     * Create a <code>menarini_dev.VENUE</code> table reference
     */
    public Venue() {
        this(DSL.name("VENUE"), null);
    }

    public <O extends Record> Venue(Table<O> child, ForeignKey<O, VenueRecord> key) {
        super(child, key, VENUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DbSchema.MENARINI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VENUE_LOCATION_ID);
    }

    @Override
    public Identity<VenueRecord, Long> getIdentity() {
        return (Identity<VenueRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VenueRecord> getPrimaryKey() {
        return Keys.KEY_VENUE_PRIMARY;
    }

    @Override
    public List<ForeignKey<VenueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VENUE_IBFK_1);
    }

    private transient Location _location;

    /**
     * Get the implicit join path to the <code>menarini_dev.LOCATION</code>
     * table.
     */
    public Location location() {
        if (_location == null)
            _location = new Location(this, Keys.VENUE_IBFK_1);

        return _location;
    }

    @Override
    public Venue as(String alias) {
        return new Venue(DSL.name(alias), this);
    }

    @Override
    public Venue as(Name alias) {
        return new Venue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Venue rename(String name) {
        return new Venue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Venue rename(Name name) {
        return new Venue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}

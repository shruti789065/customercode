/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import com.jakala.menarini.core.entities.utils.Indexes;
import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.SpeakerRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Speaker extends TableImpl<SpeakerRecord> {

    private static final long serialVersionUID = 1071959390;

    /**
     * The reference instance of <code>menarini_dev.SPEAKER</code>
     */
    public static final Speaker SPEAKER = new Speaker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpeakerRecord> getRecordType() {
        return SpeakerRecord.class;
    }

    /**
     * The column <code>menarini_dev.SPEAKER.id</code>.
     */
    public final TableField<SpeakerRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.SPEAKER.lastname</code>.
     */
    public final TableField<SpeakerRecord, String> LASTNAME = createField("lastname", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.SPEAKER.firstname</code>.
     */
    public final TableField<SpeakerRecord, String> FIRSTNAME = createField("firstname", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.SPEAKER.bio</code>.
     */
    public final TableField<SpeakerRecord, String> BIO = createField("bio", org.jooq.impl.SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>menarini_dev.SPEAKER.curriculum</code>.
     */
    public final TableField<SpeakerRecord, String> CURRICULUM = createField("curriculum", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>menarini_dev.SPEAKER.created_on</code>.
     */
    public final TableField<SpeakerRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>menarini_dev.SPEAKER.last_updated_on</code>.
     */
    public final TableField<SpeakerRecord, Timestamp> LAST_UPDATED_ON = createField("last_updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>menarini_dev.SPEAKER</code> table reference
     */
    public Speaker() {
        this(DSL.name("SPEAKER"), null);
    }

    /**
     * Create an aliased <code>menarini_dev.SPEAKER</code> table reference
     */
    public Speaker(String alias) {
        this(DSL.name(alias), SPEAKER);
    }

    /**
     * Create an aliased <code>menarini_dev.SPEAKER</code> table reference
     */
    public Speaker(Name alias) {
        this(alias, SPEAKER);
    }

    private Speaker(Name alias, Table<SpeakerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Speaker(Name alias, Table<SpeakerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Speaker(Table<O> child, ForeignKey<O, SpeakerRecord> key) {
        super(child, key, SPEAKER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbSchema.MENARINI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SPEAKER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SpeakerRecord, Long> getIdentity() {
        return Keys.IDENTITY_SPEAKER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SpeakerRecord> getPrimaryKey() {
        return Keys.KEY_SPEAKER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SpeakerRecord>> getKeys() {
        return Arrays.<UniqueKey<SpeakerRecord>>asList(Keys.KEY_SPEAKER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Speaker as(String alias) {
        return new Speaker(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Speaker as(Name alias) {
        return new Speaker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Speaker rename(String name) {
        return new Speaker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Speaker rename(Name name) {
        return new Speaker(name, null);
    }
}

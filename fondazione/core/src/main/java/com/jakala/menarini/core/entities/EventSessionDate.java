/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import com.jakala.menarini.core.entities.utils.Indexes;
import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.EventSessionDateRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventSessionDate extends TableImpl<EventSessionDateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>menarini_dev.EVENT_SESSION_DATE</code>
     */
    public static final EventSessionDate EVENT_SESSION_DATE = new EventSessionDate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventSessionDateRecord> getRecordType() {
        return EventSessionDateRecord.class;
    }

    /**
     * The column <code>menarini_dev.EVENT_SESSION_DATE.id</code>.
     */
    public final TableField<EventSessionDateRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.EVENT_SESSION_DATE.session</code>.
     */
    public final TableField<EventSessionDateRecord, String> SESSION = createField(DSL.name("session"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.EVENT_SESSION_DATE.seq_no</code>.
     */
    public final TableField<EventSessionDateRecord, Integer> SEQ_NO = createField(DSL.name("seq_no"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>menarini_dev.EVENT_SESSION_DATE.session_date</code>.
     */
    public final TableField<EventSessionDateRecord, LocalDate> SESSION_DATE = createField(DSL.name("session_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>menarini_dev.EVENT_SESSION_DATE.location_id</code>.
     */
    public final TableField<EventSessionDateRecord, Long> LOCATION_ID = createField(DSL.name("location_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.EVENT_SESSION_DATE.venue_id</code>.
     */
    public final TableField<EventSessionDateRecord, Long> VENUE_ID = createField(DSL.name("venue_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.EVENT_SESSION_DATE.event_id</code>.
     */
    public final TableField<EventSessionDateRecord, Long> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.EVENT_SESSION_DATE.created_on</code>.
     */
    public final TableField<EventSessionDateRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>menarini_dev.EVENT_SESSION_DATE.last_updated_on</code>.
     */
    public final TableField<EventSessionDateRecord, LocalDateTime> LAST_UPDATED_ON = createField(DSL.name("last_updated_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private EventSessionDate(Name alias, Table<EventSessionDateRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventSessionDate(Name alias, Table<EventSessionDateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>menarini_dev.EVENT_SESSION_DATE</code> table
     * reference
     */
    public EventSessionDate(String alias) {
        this(DSL.name(alias), EVENT_SESSION_DATE);
    }

    /**
     * Create an aliased <code>menarini_dev.EVENT_SESSION_DATE</code> table
     * reference
     */
    public EventSessionDate(Name alias) {
        this(alias, EVENT_SESSION_DATE);
    }

    /**
     * Create a <code>menarini_dev.EVENT_SESSION_DATE</code> table reference
     */
    public EventSessionDate() {
        this(DSL.name("EVENT_SESSION_DATE"), null);
    }

    public <O extends Record> EventSessionDate(Table<O> child, ForeignKey<O, EventSessionDateRecord> key) {
        super(child, key, EVENT_SESSION_DATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DbSchema.MENARINI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EVENT_SESSION_DATE_EVENT_ID, Indexes.EVENT_SESSION_DATE_LOCATION_ID, Indexes.EVENT_SESSION_DATE_VENUE_ID);
    }

    @Override
    public Identity<EventSessionDateRecord, Long> getIdentity() {
        return (Identity<EventSessionDateRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventSessionDateRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_SESSION_DATE_PRIMARY;
    }

    @Override
    public List<ForeignKey<EventSessionDateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVENT_SESSION_DATE_IBFK_1, Keys.EVENT_SESSION_DATE_IBFK_2, Keys.EVENT_SESSION_DATE_IBFK_3);
    }

    private transient Location _location;
    private transient Venue _venue;
    private transient Event _event;

    /**
     * Get the implicit join path to the <code>menarini_dev.LOCATION</code>
     * table.
     */
    public Location location() {
        if (_location == null)
            _location = new Location(this, Keys.EVENT_SESSION_DATE_IBFK_1);

        return _location;
    }

    /**
     * Get the implicit join path to the <code>menarini_dev.VENUE</code> table.
     */
    public Venue venue() {
        if (_venue == null)
            _venue = new Venue(this, Keys.EVENT_SESSION_DATE_IBFK_2);

        return _venue;
    }

    /**
     * Get the implicit join path to the <code>menarini_dev.EVENT</code> table.
     */
    public Event event() {
        if (_event == null)
            _event = new Event(this, Keys.EVENT_SESSION_DATE_IBFK_3);

        return _event;
    }

    @Override
    public EventSessionDate as(String alias) {
        return new EventSessionDate(DSL.name(alias), this);
    }

    @Override
    public EventSessionDate as(Name alias) {
        return new EventSessionDate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventSessionDate rename(String name) {
        return new EventSessionDate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventSessionDate rename(Name name) {
        return new EventSessionDate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, Integer, LocalDate, Long, Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}

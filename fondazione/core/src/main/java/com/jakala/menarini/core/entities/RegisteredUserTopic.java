/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import com.jakala.menarini.core.entities.utils.Indexes;
import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.RegisteredUserTopicRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RegisteredUserTopic extends TableImpl<RegisteredUserTopicRecord> {

    private static final long serialVersionUID = -540231599;

    /**
     * The reference instance of <code>menarini_dev.REGISTERED_USER_TOPIC</code>
     */
    public static final RegisteredUserTopic REGISTERED_USER_TOPIC = new RegisteredUserTopic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegisteredUserTopicRecord> getRecordType() {
        return RegisteredUserTopicRecord.class;
    }

    /**
     * The column <code>menarini_dev.REGISTERED_USER_TOPIC.id</code>.
     */
    public final TableField<RegisteredUserTopicRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER_TOPIC.seq_no</code>.
     */
    public final TableField<RegisteredUserTopicRecord, Integer> SEQ_NO = createField("seq_no", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER_TOPIC.topic_id</code>.
     */
    public final TableField<RegisteredUserTopicRecord, Long> TOPIC_ID = createField("topic_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER_TOPIC.registered_user_id</code>.
     */
    public final TableField<RegisteredUserTopicRecord, Long> REGISTERED_USER_ID = createField("registered_user_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER_TOPIC.created_on</code>.
     */
    public final TableField<RegisteredUserTopicRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>menarini_dev.REGISTERED_USER_TOPIC.last_updated_on</code>.
     */
    public final TableField<RegisteredUserTopicRecord, Timestamp> LAST_UPDATED_ON = createField("last_updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>menarini_dev.REGISTERED_USER_TOPIC</code> table reference
     */
    public RegisteredUserTopic() {
        this(DSL.name("REGISTERED_USER_TOPIC"), null);
    }

    /**
     * Create an aliased <code>menarini_dev.REGISTERED_USER_TOPIC</code> table reference
     */
    public RegisteredUserTopic(String alias) {
        this(DSL.name(alias), REGISTERED_USER_TOPIC);
    }

    /**
     * Create an aliased <code>menarini_dev.REGISTERED_USER_TOPIC</code> table reference
     */
    public RegisteredUserTopic(Name alias) {
        this(alias, REGISTERED_USER_TOPIC);
    }

    private RegisteredUserTopic(Name alias, Table<RegisteredUserTopicRecord> aliased) {
        this(alias, aliased, null);
    }

    private RegisteredUserTopic(Name alias, Table<RegisteredUserTopicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RegisteredUserTopic(Table<O> child, ForeignKey<O, RegisteredUserTopicRecord> key) {
        super(child, key, REGISTERED_USER_TOPIC);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbSchema.MENARINI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REGISTERED_USER_TOPIC_PRIMARY, Indexes.REGISTERED_USER_TOPIC_REGISTERED_USER_ID, Indexes.REGISTERED_USER_TOPIC_TOPIC_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RegisteredUserTopicRecord, Long> getIdentity() {
        return Keys.IDENTITY_REGISTERED_USER_TOPIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RegisteredUserTopicRecord> getPrimaryKey() {
        return Keys.KEY_REGISTERED_USER_TOPIC_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RegisteredUserTopicRecord>> getKeys() {
        return Arrays.<UniqueKey<RegisteredUserTopicRecord>>asList(Keys.KEY_REGISTERED_USER_TOPIC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RegisteredUserTopicRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RegisteredUserTopicRecord, ?>>asList(Keys.REGISTERED_USER_TOPIC_IBFK_1, Keys.REGISTERED_USER_TOPIC_IBFK_2);
    }

    public Topic topic() {
        return new Topic(this, Keys.REGISTERED_USER_TOPIC_IBFK_1);
    }

    public RegisteredUser registeredUser() {
        return new RegisteredUser(this, Keys.REGISTERED_USER_TOPIC_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegisteredUserTopic as(String alias) {
        return new RegisteredUserTopic(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RegisteredUserTopic as(Name alias) {
        return new RegisteredUserTopic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisteredUserTopic rename(String name) {
        return new RegisteredUserTopic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RegisteredUserTopic rename(Name name) {
        return new RegisteredUserTopic(name, null);
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import com.jakala.menarini.core.entities.utils.Indexes;
import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.EventSpeakerRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventSpeaker extends TableImpl<EventSpeakerRecord> {

    private static final long serialVersionUID = 1621132933;

    /**
     * The reference instance of <code>menarini_dev.EVENT_SPEAKER</code>
     */
    public static final EventSpeaker EVENT_SPEAKER = new EventSpeaker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventSpeakerRecord> getRecordType() {
        return EventSpeakerRecord.class;
    }

    /**
     * The column <code>menarini_dev.EVENT_SPEAKER.id</code>.
     */
    public final TableField<EventSpeakerRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.EVENT_SPEAKER.event_id</code>.
     */
    public final TableField<EventSpeakerRecord, Long> EVENT_ID = createField("event_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.EVENT_SPEAKER.speaker_id</code>.
     */
    public final TableField<EventSpeakerRecord, Long> SPEAKER_ID = createField("speaker_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.EVENT_SPEAKER.created_on</code>.
     */
    public final TableField<EventSpeakerRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>menarini_dev.EVENT_SPEAKER.last_updated_on</code>.
     */
    public final TableField<EventSpeakerRecord, Timestamp> LAST_UPDATED_ON = createField("last_updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>menarini_dev.EVENT_SPEAKER</code> table reference
     */
    public EventSpeaker() {
        this(DSL.name("EVENT_SPEAKER"), null);
    }

    /**
     * Create an aliased <code>menarini_dev.EVENT_SPEAKER</code> table reference
     */
    public EventSpeaker(String alias) {
        this(DSL.name(alias), EVENT_SPEAKER);
    }

    /**
     * Create an aliased <code>menarini_dev.EVENT_SPEAKER</code> table reference
     */
    public EventSpeaker(Name alias) {
        this(alias, EVENT_SPEAKER);
    }

    private EventSpeaker(Name alias, Table<EventSpeakerRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventSpeaker(Name alias, Table<EventSpeakerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EventSpeaker(Table<O> child, ForeignKey<O, EventSpeakerRecord> key) {
        super(child, key, EVENT_SPEAKER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DbSchema.MENARINI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENT_SPEAKER_EVENT_ID, Indexes.EVENT_SPEAKER_PRIMARY, Indexes.EVENT_SPEAKER_SPEAKER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EventSpeakerRecord, Long> getIdentity() {
        return Keys.IDENTITY_EVENT_SPEAKER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EventSpeakerRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_SPEAKER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventSpeakerRecord>> getKeys() {
        return Arrays.<UniqueKey<EventSpeakerRecord>>asList(Keys.KEY_EVENT_SPEAKER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EventSpeakerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventSpeakerRecord, ?>>asList(Keys.EVENT_SPEAKER_IBFK_1, Keys.EVENT_SPEAKER_IBFK_2);
    }

    public Event event() {
        return new Event(this, Keys.EVENT_SPEAKER_IBFK_1);
    }

    public Speaker speaker() {
        return new Speaker(this, Keys.EVENT_SPEAKER_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventSpeaker as(String alias) {
        return new EventSpeaker(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventSpeaker as(Name alias) {
        return new EventSpeaker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventSpeaker rename(String name) {
        return new EventSpeaker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventSpeaker rename(Name name) {
        return new EventSpeaker(name, null);
    }
}

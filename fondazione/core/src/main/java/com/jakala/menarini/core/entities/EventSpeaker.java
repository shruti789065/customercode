/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import com.jakala.menarini.core.entities.utils.Indexes;
import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.EventSpeakerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventSpeaker extends TableImpl<EventSpeakerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>menarini_dev.EVENT_SPEAKER</code>
     */
    public static final EventSpeaker EVENT_SPEAKER = new EventSpeaker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventSpeakerRecord> getRecordType() {
        return EventSpeakerRecord.class;
    }

    /**
     * The column <code>menarini_dev.EVENT_SPEAKER.id</code>.
     */
    public final TableField<EventSpeakerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.EVENT_SPEAKER.event_id</code>.
     */
    public final TableField<EventSpeakerRecord, Long> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.EVENT_SPEAKER.speaker_id</code>.
     */
    public final TableField<EventSpeakerRecord, Long> SPEAKER_ID = createField(DSL.name("speaker_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menarini_dev.EVENT_SPEAKER.created_on</code>.
     */
    public final TableField<EventSpeakerRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>menarini_dev.EVENT_SPEAKER.last_updated_on</code>.
     */
    public final TableField<EventSpeakerRecord, LocalDateTime> LAST_UPDATED_ON = createField(DSL.name("last_updated_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private EventSpeaker(Name alias, Table<EventSpeakerRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventSpeaker(Name alias, Table<EventSpeakerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>menarini_dev.EVENT_SPEAKER</code> table reference
     */
    public EventSpeaker(String alias) {
        this(DSL.name(alias), EVENT_SPEAKER);
    }

    /**
     * Create an aliased <code>menarini_dev.EVENT_SPEAKER</code> table reference
     */
    public EventSpeaker(Name alias) {
        this(alias, EVENT_SPEAKER);
    }

    /**
     * Create a <code>menarini_dev.EVENT_SPEAKER</code> table reference
     */
    public EventSpeaker() {
        this(DSL.name("EVENT_SPEAKER"), null);
    }

    public <O extends Record> EventSpeaker(Table<O> child, ForeignKey<O, EventSpeakerRecord> key) {
        super(child, key, EVENT_SPEAKER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DbSchema.MENARINI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EVENT_SPEAKER_EVENT_ID, Indexes.EVENT_SPEAKER_SPEAKER_ID);
    }

    @Override
    public Identity<EventSpeakerRecord, Long> getIdentity() {
        return (Identity<EventSpeakerRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventSpeakerRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_SPEAKER_PRIMARY;
    }

    @Override
    public List<ForeignKey<EventSpeakerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVENT_SPEAKER_IBFK_1, Keys.EVENT_SPEAKER_IBFK_2);
    }

    private transient Event _event;
    private transient Speaker _speaker;

    /**
     * Get the implicit join path to the <code>menarini_dev.EVENT</code> table.
     */
    public Event event() {
        if (_event == null)
            _event = new Event(this, Keys.EVENT_SPEAKER_IBFK_1);

        return _event;
    }

    /**
     * Get the implicit join path to the <code>menarini_dev.SPEAKER</code>
     * table.
     */
    public Speaker speaker() {
        if (_speaker == null)
            _speaker = new Speaker(this, Keys.EVENT_SPEAKER_IBFK_2);

        return _speaker;
    }

    @Override
    public EventSpeaker as(String alias) {
        return new EventSpeaker(DSL.name(alias), this);
    }

    @Override
    public EventSpeaker as(Name alias) {
        return new EventSpeaker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventSpeaker rename(String name) {
        return new EventSpeaker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventSpeaker rename(Name name) {
        return new EventSpeaker(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.jakala.menarini.core.entities;


import java.time.LocalDateTime;

import com.jakala.menarini.core.entities.utils.Keys;
import com.jakala.menarini.core.entities.utils.DbSchema;
import com.jakala.menarini.core.entities.records.LocationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Location extends TableImpl<LocationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>menarini_dev.LOCATION</code>
     */
    public static final Location LOCATION = new Location();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocationRecord> getRecordType() {
        return LocationRecord.class;
    }

    /**
     * The column <code>menarini_dev.LOCATION.id</code>.
     */
    public final TableField<LocationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>menarini_dev.LOCATION.city</code>.
     */
    public final TableField<LocationRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.LOCATION.country</code>.
     */
    public final TableField<LocationRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menarini_dev.LOCATION.notes</code>.
     */
    public final TableField<LocationRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>menarini_dev.LOCATION.created_on</code>.
     */
    public final TableField<LocationRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>menarini_dev.LOCATION.last_updated_on</code>.
     */
    public final TableField<LocationRecord, LocalDateTime> LAST_UPDATED_ON = createField(DSL.name("last_updated_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Location(Name alias, Table<LocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Location(Name alias, Table<LocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>menarini_dev.LOCATION</code> table reference
     */
    public Location(String alias) {
        this(DSL.name(alias), LOCATION);
    }

    /**
     * Create an aliased <code>menarini_dev.LOCATION</code> table reference
     */
    public Location(Name alias) {
        this(alias, LOCATION);
    }

    /**
     * Create a <code>menarini_dev.LOCATION</code> table reference
     */
    public Location() {
        this(DSL.name("LOCATION"), null);
    }

    public <O extends Record> Location(Table<O> child, ForeignKey<O, LocationRecord> key) {
        super(child, key, LOCATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DbSchema.MENARINI;
    }

    @Override
    public Identity<LocationRecord, Long> getIdentity() {
        return (Identity<LocationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LocationRecord> getPrimaryKey() {
        return Keys.KEY_LOCATION_PRIMARY;
    }

    @Override
    public Location as(String alias) {
        return new Location(DSL.name(alias), this);
    }

    @Override
    public Location as(Name alias) {
        return new Location(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(String name) {
        return new Location(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(Name name) {
        return new Location(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
